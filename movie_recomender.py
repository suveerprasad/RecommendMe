# -*- coding: utf-8 -*-
"""Movie Recomender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-j8Bl07hpSyh5owOdcPiJhu3f5Gy-5u
"""

import numpy as np
import pandas as pd
movies = pd.read_csv('/tmdb_5000_movies.csv')
credits = pd.read_csv('/tmdb_5000_credits.csv')
movies.head(1)

movies = movies.merge(credits,on='title')
movies.head()

#genres
#id
#keywords
#title
#overview
movies.info()

movies = movies[['id','title','overview','genres','keywords','cast','crew']]

movies.head()

#missing data

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.drop_duplicates(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

import ast # Import the ast module at the beginning of your code

def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)
movies.head()

movies['keywords'] = movies['keywords'].apply(convert)

def convert3(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convert3)

movies.head()

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

new_df = movies[['id','title','tags']]

new_df.head()

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names_out()

import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

ps.stem('loved')

new_df['tags'] = new_df['tags'].apply(stem)

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

cosine_similarity(vectors)

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

pickle.dump()

recommend('Batman Begins')

import pickle
pickle.dump(new_df,open('movies.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))